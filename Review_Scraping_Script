// Configuration object for accessibility features to look for
const ACCESSIBILITY_FEATURES = {
  keywords: [
    'wheelchair', 'accessible', 'elevator', 
    'roll-in shower', 'ramp', 'handicap',
    'ada compliant', 'mobility', 'disabled'
  ],
  selectors: [
    'accessibility',
    'amenities',
    'facilities',
    'room-features'
  ]
};

// Configuration for spreadsheet
const SPREADSHEET_CONFIG = {
  spreadsheetId: '1jNu225GVzfJrvJIVw2DQ-qKhRDPgYOVUIifYeEEXhsw',
  sheetName: 'Accessibility Data',
  folderName: 'Hotel Accessibility Data'
};

/**
 * Gets or creates a spreadsheet for storing results
 * @return {SpreadsheetApp.Spreadsheet} The spreadsheet object
 */
function getOrCreateSpreadsheet() {
  let spreadsheet;
  
  // If spreadsheet ID is provided, try to open it
  if (SPREADSHEET_CONFIG.spreadsheetId) {
    try {
      spreadsheet = SpreadsheetApp.openById(SPREADSHEET_CONFIG.spreadsheetId);
      Logger.log('Using existing spreadsheet: ' + spreadsheet.getName());
      return spreadsheet;
    } catch (error) {
      Logger.log('Could not open specified spreadsheet: ' + error.message);
    }
  }
  
  // Create new spreadsheet in the specified folder
  let folder;
  try {
    // Try to find existing folder
    const folders = DriveApp.getFoldersByName(SPREADSHEET_CONFIG.folderName);
    if (folders.hasNext()) {
      folder = folders.next();
    } else {
      // Create new folder if it doesn't exist
      folder = DriveApp.createFolder(SPREADSHEET_CONFIG.folderName);
    }
    
    // Create new spreadsheet
    const fileName = 'Hotel Accessibility Data - ' + new Date().toISOString().split('T')[0];
    spreadsheet = SpreadsheetApp.create(fileName);
    
    // Move to proper folder
    const file = DriveApp.getFileById(spreadsheet.getId());
    folder.addFile(file);
    DriveApp.getRootFolder().removeFile(file);
    
    Logger.log('Created new spreadsheet: ' + fileName);
    
    // Update the configuration with the new spreadsheet ID
    SPREADSHEET_CONFIG.spreadsheetId = spreadsheet.getId();
    
    return spreadsheet;
  } catch (error) {
    throw new Error('Failed to create spreadsheet: ' + error.message);
  }
}

/**
 * Main function to scrape hotel websites
 * @param {Array} urls Array of hotel website URLs to scrape
 * @return {Array} Array of objects containing scraped accessibility information
 */
function scrapeHotelAccessibility(urls) {
  const results = [];
  
  for (const url of urls) {
    try {
      // Fetch webpage content
      const response = fetchWebpage(url);
      if (!response) continue;
      
      const accessibilityInfo = {
        url: url,
        timestamp: new Date().toISOString(),
        features: extractAccessibilityFeatures(response),
        rawText: extractRelevantText(response)
      };
      
      results.push(accessibilityInfo);
      
      // Add small delay to avoid overloading servers
      Utilities.sleep(1000);
      
    } catch (error) {
      Logger.log(`Error scraping ${url}: ${error.message}`);
      continue;
    }
  }
  
  // Save results to spreadsheet
  saveToSpreadsheet(results);
  return results;
}

/**
 * Fetches webpage content using UrlFetchApp
 * @param {string} url URL to fetch
 * @return {string} Webpage content
 */
function fetchWebpage(url) {
  try {
    const options = {
      'muteHttpExceptions': true,
      'followRedirects': true,
      'validateHttpsCertificates': true
    };
    
    const response = UrlFetchApp.fetch(url, options);
    if (response.getResponseCode() === 200) {
      return response.getContentText();
    }
    Logger.log(`Failed to fetch ${url}: ${response.getResponseCode()}`);
    return null;
  } catch (error) {
    Logger.log(`Error fetching ${url}: ${error.message}`);
    return null;
  }
}

/**
 * Extracts accessibility features from webpage content
 * @param {string} content Webpage content
 * @return {Object} Found accessibility features
 */
function extractAccessibilityFeatures(content) {
  const features = {
    wheelchairAccess: false,
    elevator: false,
    rollInShower: false,
    ramps: false,
    accessibleRoom: false,
    carPark: false,
    petsWelcome: false,
    restaurant: false,
    fitnessCenter: false,
    wiFi: false,
    airConditioning: false,
    breakfast: false,
    bar: false,
    meetingRooms: false,
    nonSmoking: false,
    roomService: false,
    other: []
  };

  const keywords = {
    wheelchairAccess: ['wheelchair', 'wheelchair accessible', 'accessible'],
    elevator: ['elevator', 'lift'],
    rollInShower: ['roll-in shower', 'roll in shower', 'roll-in'],
    ramps: ['ramp', 'ramps', 'accessible ramp'],
    accessibleRoom: ['accessible room', 'mobility accessible', 'hearing accessible', 'mobility and hearing accessible'],
    carPark: ['car park', 'parking'],
    petsWelcome: ['pets welcome', 'pet-friendly', 'pets allowed'],
    restaurant: ['restaurant', 'on-site restaurant'],
    fitnessCenter: ['fitness center', 'gym', 'exercise room'],
    wiFi: ['wi-fi', 'wifi', 'wireless internet'],
    airConditioning: ['air conditioning', 'ac', 'air-conditioned'],
    breakfast: ['breakfast', 'complimentary breakfast'],
    bar: ['bar', 'lounge'],
    meetingRooms: ['meeting rooms', 'conference room'],
    nonSmoking: ['non smoking', 'smoke-free', '100% non smoking property'],
    roomService: ['room service'],
    other: ACCESSIBILITY_FEATURES.keywords
  };

  const lowerContent = content.toLowerCase();

  const containsKeyword = (keywords) =>
    keywords.some((keyword) => lowerContent.includes(keyword.toLowerCase()));

  // Update features based on keyword matching
  features.wheelchairAccess = containsKeyword(keywords.wheelchairAccess);
  features.elevator = containsKeyword(keywords.elevator);
  features.rollInShower = containsKeyword(keywords.rollInShower);
  features.ramps = containsKeyword(keywords.ramps);
  features.accessibleRoom = containsKeyword(keywords.accessibleRoom);
  features.carPark = containsKeyword(keywords.carPark);
  features.petsWelcome = containsKeyword(keywords.petsWelcome);
  features.restaurant = containsKeyword(keywords.restaurant);
  features.fitnessCenter = containsKeyword(keywords.fitnessCenter);
  features.wiFi = containsKeyword(keywords.wiFi);
  features.airConditioning = containsKeyword(keywords.airConditioning);
  features.breakfast = containsKeyword(keywords.breakfast);
  features.bar = containsKeyword(keywords.bar);
  features.meetingRooms = containsKeyword(keywords.meetingRooms);
  features.nonSmoking = containsKeyword(keywords.nonSmoking);
  features.roomService = containsKeyword(keywords.roomService);

  for (const keyword of keywords.other) {
    if (lowerContent.includes(keyword.toLowerCase())) {
      const sentence = extractSentenceWithKeyword(content, keyword);
      if (sentence && !features.other.includes(sentence.trim())) {
        features.other.push(sentence.trim());
      }
    }
  }

  return features;
}

/**
 * Extracts relevant text sections from webpage content
 * @param {string} content Webpage content
 * @return {string} Extracted relevant text
 */
function extractRelevantText(content) {
  const relevantText = [];
  
  // Simple HTML parsing to extract text from relevant sections
  const parser = new RegExp('<[^>]+>', 'g');
  const cleanContent = content.replace(parser, ' ');
  
  // Split into paragraphs and filter relevant ones
  const paragraphs = cleanContent.split('\n');
  for (const para of paragraphs) {
    if (isRelevantParagraph(para)) {
      relevantText.push(para.trim());
    }
  }
  
  return relevantText.join('\n');
}

/**
 * Checks if a paragraph contains relevant accessibility information
 * @param {string} paragraph Text paragraph to check
 * @return {boolean} True if paragraph is relevant
 */
function isRelevantParagraph(paragraph) {
  const lowerPara = paragraph.toLowerCase().trim();
  
  // Skip empty or very short paragraphs
  if (lowerPara.length < 10) return false;
  
  // Check if paragraph contains any keywords
  return ACCESSIBILITY_FEATURES.keywords.some(keyword => 
    lowerPara.includes(keyword)
  );
}

/**
 * Extracts the sentence containing a keyword
 * @param {string} text Full text to search
 * @param {string} keyword Keyword to find
 * @return {string} Sentence containing keyword
 */
function extractSentenceWithKeyword(text, keyword) {
  const sentences = text.match(/[^.!?]+[.!?]+/g) || [];
  return sentences.find(sentence => 
    sentence.toLowerCase().includes(keyword.toLowerCase())
  );
}

/**
 * Saves results to a Google Spreadsheet
 * @param {Array} results Array of scraped results
 */
function saveToSpreadsheet(results) {
  const spreadsheet = getOrCreateSpreadsheet();
  let sheet = spreadsheet.getSheetByName(SPREADSHEET_CONFIG.sheetName);
  
  // Create sheet if it doesn't exist
  if (!sheet) {
    sheet = spreadsheet.insertSheet(SPREADSHEET_CONFIG.sheetName);
  }
  
  // Create headers if sheet is empty
  if (sheet.getLastRow() === 0) {
    sheet.getRange(1, 1, 1, 19).setValues([[
      'URL',
      'Timestamp',
      'Wheelchair Access',
      'Elevator',
      'Roll-in Shower',
      'Ramps',
      'Accessible Room',
      'Car Park',
      'Pets Welcome',
      'Restaurant',
      'Fitness Center',
      'Wi-Fi',
      'Air Conditioning',
      'Breakfast',
      'Bar',
      'Meeting Rooms',
      'Non Smoking',
      'Room Service',
      'Other Features'
    ]]);
    
    // Format header row
    sheet.getRange(1, 1, 1, 19)
      .setFontWeight('bold')
      .setBackground('#E8EAED');
    
    // Freeze header row
    sheet.setFrozenRows(1);
  }
  
  // Prepare data for spreadsheet
  const data = results.map(result => [
    result.url,
    result.timestamp,
    result.features.wheelchairAccess,
    result.features.elevator,
    result.features.rollInShower,
    result.features.ramps,
    result.features.accessibleRoom,
    result.features.carPark,
    result.features.petsWelcome,
    result.features.restaurant,
    result.features.fitnessCenter,
    result.features.wiFi,
    result.features.airConditioning,
    result.features.breakfast,
    result.features.bar,
    result.features.meetingRooms,
    result.features.nonSmoking,
    result.features.roomService,
    result.features.other.join('; ')  // Joining 'other' features with a semicolon
  ]);
  
  // Append data to sheet
  if (data.length > 0) {
    sheet.getRange(sheet.getLastRow() + 1, 1, data.length, data[0].length)
      .setValues(data);
    
    // Auto-resize columns to fit content
    sheet.autoResizeColumns(1, 19);
  }
  
  // Log the spreadsheet URL
  Logger.log('Results saved to: ' + spreadsheet.getUrl());
}

/**
 * Test function to verify spreadsheet connection
 */
function testSpreadsheetConnection() {
  try {
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_CONFIG.spreadsheetId);
    Logger.log('Successfully connected to spreadsheet: ' + spreadsheet.getName());
    return true;
  } catch (error) {
    Logger.log('Error connecting to spreadsheet: ' + error.message);
    return false;
  }
}

/**
 * Example usage function
 */
function runScraper() {
  const urls = [
    'https://all.accor.com/hotel/8501/index.en.shtml',
    'https://all.accor.com/hotel/2185/index.en.shtml',
    'https://www.hilton.com/en/',
    'https://sheraton.marriott.com/'
  ];
  
  scrapeHotelAccessibility(urls);
}
